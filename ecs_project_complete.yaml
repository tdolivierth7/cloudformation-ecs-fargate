AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECS Fargate + EFS + ALB for nginx.
  Creates VPC, 2 subnets, Internet Gateway, RouteTable, ECS cluster, EFS (2 AZ mount targets),
  Task Definition (nginx + EFS mount + CloudWatch Logs), ALB (2 AZ), Target Group,
  Listener (HTTP 80), Service (Fargate/awsvpc). For demo/dev use.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
  NginxContainerImage:
    Type: String
    Default: nginx:1.29
    Description: Container image for nginx. 
  HTTPDContainerImage:
    Type: String
    Default: httpd:2.4.65
    Description: Container image for HTTPD
  DesiredCount:
    Type: Number
    Default: 1
  Cpu:
    Type: String
    Default: '1024'
    AllowedValues: ['256','512','1024','2048','4096']
  Memory:
    Type: String
    Default: '2048'
    AllowedValues: ['512','1024','2048','3072','4096','5120','6144','7168','8192']
  ContainerPort:
    Type: Number
    Default: 80
    Description: nginx HTTP port (80 in dev). ALB forwards to this.
  LogGroupName:
    Type: String
    Default: /ecs/nginx
  LogGroupNameHTTPD:
    Type: String
    Default: /ecs/httpd

Mappings:
  RegionMap:
    # Used by AWS Logs driver; not strictly required if we pass AWS_REGION dynamically,
    # but keeping map makes it explicit. (Can be extended as needed.)
    us-east-1:
      LogsRegion: us-east-1

Resources:

  ########################################
  # Networking: VPC, Subnets, Internet
  ########################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: ecs-nginx-vpc }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

### Public Subnets Configuration ###
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: ecs-pub-1 }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: ecs-pub-2 }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

### Private Subnets Configuration ###

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: ecs-pri-1 }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: ecs-pri-2 }]

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet1
      ConnectivityType: public
    DependsOn: NatEip

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

  ########################################
  # Security Groups
  ########################################
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP for ALB; egress all
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: ecs-alb-sg }]

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AlbSecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to tasks on container port; egress all
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref PrivateSubnet1Cidr
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref PrivateSubnet2Cidr
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet1Cidr
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet2Cidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: ecs-nginx-service-sg }]

  HTTPDServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AlbSecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to tasks on container port; egress all
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref PrivateSubnet1Cidr
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: !Ref PrivateSubnet2Cidr
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet1Cidr
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet2Cidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: ecs-httpd-service-sg }]

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS (2049) from ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ServiceSecurityGroup
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref HTTPDServiceSecurityGroup
      SecurityGroupEgress:
        # - IpProtocol: -1
        #   CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
      Tags: [{ Key: Name, Value: efs-sg }]

  ########################################
  # EFS (2 AZ mount targets)
  ########################################
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: nginx-efs

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      # SubnetId: !Ref PublicSubnet1
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups: [!Ref EfsSecurityGroup]

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      # SubnetId: !Ref PublicSubnet2
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups: [!Ref EfsSecurityGroup]

  ########################################
  # CloudWatch Logs
  ########################################
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 14

  LogGroupHTTPD:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupNameHTTPD
      RetentionInDays: 14

  ########################################
  # IAM Roles for ECS
  ########################################
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        # - arn:aws:iam::aws:policy/AdministratorAccess
      Path: /

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ########################################
  # Cloud Map Configuration for private DNS namespace inside the VPC
  ########################################

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: myapp.local          # change as you like
      Vpc: !Ref VPC
      Description: "Private namespace for ECS services"

  NginxDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: nginx       # After deployment, this will resolve inside the VPC as:  nginx.myapp.local
      NamespaceId: !Ref CloudMapNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1


  HttpdDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: httpd       # After deployment, this will resolve inside the VPC as:  httpd.myapp.local
      NamespaceId: !Ref CloudMapNamespace
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ########################################
  # ECS Cluster
  ########################################
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: nginx-ecs-cluster

  ########################################
  # Task Definition (Fargate + EFS + Logs)
  ########################################

  TaskDefinition: # Nginx
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nginx
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      Volumes:
        - Name: efsdata
          EfsVolumeConfiguration:
            FileSystemId: !Ref FileSystem
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: nginx
          Image: !Ref NginxContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
              Name: web
          Essential: true
          MountPoints:
            - ContainerPath: /mnt/efs
              SourceVolume: efsdata
              ReadOnly: false
          EntryPoint:
            - nginx
            - "-g"
            - "daemon off;"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx

  TaskDefinitionHTTPD: # HTTPD
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HTTPD
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      Volumes:
        - Name: efsdata
          EfsVolumeConfiguration:
            FileSystemId: !Ref FileSystem
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: httpd
          Image: !Ref HTTPDContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
              Name: web              
          Essential: true
          MountPoints:
            - ContainerPath: /mnt/efs
              SourceVolume: efsdata
              ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupNameHTTPD
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: httpd

  ########################################
  # ALB + Target Group + Listener (HTTP 80)
  ########################################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: nginx-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Type: application

  TargetGroup: # Nginx
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: nginx-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      Matcher:
        HttpCode: '200-399'

  TargetGroupHTTPD: # HTTPD
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: httpd-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      Matcher:
        HttpCode: '200-399'

  HttpListenerNginx:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  HttpListenerHTTPD:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupHTTPD

  ########################################
  # ECS Service (Fargate, 2 AZs, behind ALB)
  ########################################
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListenerNginx
      - TaskDefinition
      - MountTarget1
      - MountTarget2
      - FileSystem
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref ServiceSecurityGroup]
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt NginxDiscoveryService.Arn
          ContainerName: nginx
          # ContainerPort: 80
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt CloudMapNamespace.Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableExecuteCommand: true

  HTTPDService:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListenerHTTPD
      - TaskDefinitionHTTPD
      - MountTarget1
      - MountTarget2
      - FileSystem
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinitionHTTPD
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!Ref HTTPDServiceSecurityGroup]
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      LoadBalancers:
        - ContainerName: httpd
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupHTTPD
      ServiceRegistries:
        - RegistryArn: !GetAtt HttpdDiscoveryService.Arn
          ContainerName: httpd
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !GetAtt CloudMapNamespace.Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableExecuteCommand: true

Outputs:
  AlbDNSName:
    Description: DNS name of the public Application Load Balancer (use this to access nginx)
    Value: !GetAtt LoadBalancer.DNSName
  ClusterName:
    Value: !Ref Cluster
  LogGroupOut:
    Value: !Ref LogGroupName